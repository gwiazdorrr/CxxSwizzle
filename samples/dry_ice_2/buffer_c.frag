// Created by David Gallardo - xjorma/2020
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0

// Pressure solver 1st interation

// Impired by https://www.shadertoy.com/view/MdSczK by Trirop
// Since in shadertoy we don't have countless pass we need to do many pass at once.


// code generated by :
/*
#include <iostream>

const int tabSize = 48;

std::int64_t divTab[tabSize][tabSize];
std::int64_t preTab[tabSize][tabSize];


void recurse(int x, int y, int level)
{
    level--;
    divTab[x][y] += std::int64_t(1) << std::int64_t(level * 2);
    if (level)
    {
        recurse(x - 1, y, level);
        recurse(x + 1, y, level);
        recurse(x, y - 1, level);
        recurse(x, y + 1, level);
    }
    else
    {
        preTab[x - 1][y]++;
        preTab[x + 1][y]++;
        preTab[x][y - 1]++;
        preTab[x][y + 1]++;
    }
}

void clear(std::int64_t (&tab)[tabSize][tabSize])
{
    for (int x = 0; x < tabSize; x++)
    {
        for (int y = 0; y < tabSize; y++)
        {
            tab[x][y] = 0;
        }
    }
}

void output(const char *functionName, std::int64_t(&tab)[tabSize][tabSize], std::int64_t multiplier)
{
    std::int64_t total = 0;
    for (int x = 0; x < tabSize; x++)
    {
        for (int y = 0; y < tabSize; y++)
        {
            if (tab[x][y])
            {
                total += tab[x][y];
                std::cout << "\tp += " << tab[x][y] << ".*" << functionName << "(" << x - tabSize / 2 << ", " << y - tabSize / 2 << ");\n";
            }
        }
    }
    total *= multiplier;
    std::cout << "\treturn\tp / " << total << ".;\n";
}

int main()
{
    clear(divTab);
    clear(preTab);
    recurse(tabSize / 2, tabSize / 2, 10);
    output("div", divTab, 2);
    output("pre", preTab, 1);
}
*/

float div(int x,int y)
{
    return texelFetch(iChannel0, ivec2(gl_FragCoord.xy) + ivec2(x,  y) , 0).x;
}

float getDiv( void )
{
    float p = 0.;
    p += 1.*div(-9, 0);
    p += 9.*div(-8, -1);
    p += 4.*div(-8, 0);
    p += 9.*div(-8, 1);
    p += 36.*div(-7, -2);
    p += 32.*div(-7, -1);
    p += 97.*div(-7, 0);
    p += 32.*div(-7, 1);
    p += 36.*div(-7, 2);
    p += 84.*div(-6, -3);
    p += 112.*div(-6, -2);
    p += 436.*div(-6, -1);
    p += 320.*div(-6, 0);
    p += 436.*div(-6, 1);
    p += 112.*div(-6, 2);
    p += 84.*div(-6, 3);
    p += 126.*div(-5, -4);
    p += 224.*div(-5, -3);
    p += 1092.*div(-5, -2);
    p += 1280.*div(-5, -1);
    p += 2336.*div(-5, 0);
    p += 1280.*div(-5, 1);
    p += 1092.*div(-5, 2);
    p += 224.*div(-5, 3);
    p += 126.*div(-5, 4);
    p += 126.*div(-4, -5);
    p += 280.*div(-4, -4);
    p += 1694.*div(-4, -3);
    p += 2752.*div(-4, -2);
    p += 6656.*div(-4, -1);
    p += 6464.*div(-4, 0);
    p += 6656.*div(-4, 1);
    p += 2752.*div(-4, 2);
    p += 1694.*div(-4, 3);
    p += 280.*div(-4, 4);
    p += 126.*div(-4, 5);
    p += 84.*div(-3, -6);
    p += 224.*div(-3, -5);
    p += 1694.*div(-3, -4);
    p += 3520.*div(-3, -3);
    p += 11016.*div(-3, -2);
    p += 16128.*div(-3, -1);
    p += 24608.*div(-3, 0);
    p += 16128.*div(-3, 1);
    p += 11016.*div(-3, 2);
    p += 3520.*div(-3, 3);
    p += 1694.*div(-3, 4);
    p += 224.*div(-3, 5);
    p += 84.*div(-3, 6);
    p += 36.*div(-2, -7);
    p += 112.*div(-2, -6);
    p += 1092.*div(-2, -5);
    p += 2752.*div(-2, -4);
    p += 11016.*div(-2, -3);
    p += 21664.*div(-2, -2);
    p += 47432.*div(-2, -1);
    p += 59712.*div(-2, 0);
    p += 47432.*div(-2, 1);
    p += 21664.*div(-2, 2);
    p += 11016.*div(-2, 3);
    p += 2752.*div(-2, 4);
    p += 1092.*div(-2, 5);
    p += 112.*div(-2, 6);
    p += 36.*div(-2, 7);
    p += 9.*div(-1, -8);
    p += 32.*div(-1, -7);
    p += 436.*div(-1, -6);
    p += 1280.*div(-1, -5);
    p += 6656.*div(-1, -4);
    p += 16128.*div(-1, -3);
    p += 47432.*div(-1, -2);
    p += 92224.*div(-1, -1);
    p += 163476.*div(-1, 0);
    p += 92224.*div(-1, 1);
    p += 47432.*div(-1, 2);
    p += 16128.*div(-1, 3);
    p += 6656.*div(-1, 4);
    p += 1280.*div(-1, 5);
    p += 436.*div(-1, 6);
    p += 32.*div(-1, 7);
    p += 9.*div(-1, 8);
    p += 1.*div(0, -9);
    p += 4.*div(0, -8);
    p += 97.*div(0, -7);
    p += 320.*div(0, -6);
    p += 2336.*div(0, -5);
    p += 6464.*div(0, -4);
    p += 24608.*div(0, -3);
    p += 59712.*div(0, -2);
    p += 163476.*div(0, -1);
    p += 409744.*div(0, 0);
    p += 163476.*div(0, 1);
    p += 59712.*div(0, 2);
    p += 24608.*div(0, 3);
    p += 6464.*div(0, 4);
    p += 2336.*div(0, 5);
    p += 320.*div(0, 6);
    p += 97.*div(0, 7);
    p += 4.*div(0, 8);
    p += 1.*div(0, 9);
    p += 9.*div(1, -8);
    p += 32.*div(1, -7);
    p += 436.*div(1, -6);
    p += 1280.*div(1, -5);
    p += 6656.*div(1, -4);
    p += 16128.*div(1, -3);
    p += 47432.*div(1, -2);
    p += 92224.*div(1, -1);
    p += 163476.*div(1, 0);
    p += 92224.*div(1, 1);
    p += 47432.*div(1, 2);
    p += 16128.*div(1, 3);
    p += 6656.*div(1, 4);
    p += 1280.*div(1, 5);
    p += 436.*div(1, 6);
    p += 32.*div(1, 7);
    p += 9.*div(1, 8);
    p += 36.*div(2, -7);
    p += 112.*div(2, -6);
    p += 1092.*div(2, -5);
    p += 2752.*div(2, -4);
    p += 11016.*div(2, -3);
    p += 21664.*div(2, -2);
    p += 47432.*div(2, -1);
    p += 59712.*div(2, 0);
    p += 47432.*div(2, 1);
    p += 21664.*div(2, 2);
    p += 11016.*div(2, 3);
    p += 2752.*div(2, 4);
    p += 1092.*div(2, 5);
    p += 112.*div(2, 6);
    p += 36.*div(2, 7);
    p += 84.*div(3, -6);
    p += 224.*div(3, -5);
    p += 1694.*div(3, -4);
    p += 3520.*div(3, -3);
    p += 11016.*div(3, -2);
    p += 16128.*div(3, -1);
    p += 24608.*div(3, 0);
    p += 16128.*div(3, 1);
    p += 11016.*div(3, 2);
    p += 3520.*div(3, 3);
    p += 1694.*div(3, 4);
    p += 224.*div(3, 5);
    p += 84.*div(3, 6);
    p += 126.*div(4, -5);
    p += 280.*div(4, -4);
    p += 1694.*div(4, -3);
    p += 2752.*div(4, -2);
    p += 6656.*div(4, -1);
    p += 6464.*div(4, 0);
    p += 6656.*div(4, 1);
    p += 2752.*div(4, 2);
    p += 1694.*div(4, 3);
    p += 280.*div(4, 4);
    p += 126.*div(4, 5);
    p += 126.*div(5, -4);
    p += 224.*div(5, -3);
    p += 1092.*div(5, -2);
    p += 1280.*div(5, -1);
    p += 2336.*div(5, 0);
    p += 1280.*div(5, 1);
    p += 1092.*div(5, 2);
    p += 224.*div(5, 3);
    p += 126.*div(5, 4);
    p += 84.*div(6, -3);
    p += 112.*div(6, -2);
    p += 436.*div(6, -1);
    p += 320.*div(6, 0);
    p += 436.*div(6, 1);
    p += 112.*div(6, 2);
    p += 84.*div(6, 3);
    p += 36.*div(7, -2);
    p += 32.*div(7, -1);
    p += 97.*div(7, 0);
    p += 32.*div(7, 1);
    p += 36.*div(7, 2);
    p += 9.*div(8, -1);
    p += 4.*div(8, 0);
    p += 9.*div(8, 1);
    p += 1.*div(9, 0);
    return  p / 1048576.;
}

float pre(int x,int y)
{
    return texelFetch(iChannel1, ivec2(gl_FragCoord.xy) + ivec2(x,  y) , 0).x;
}

float getPre( void )
{
    float p = 0.;
    p += 1.*pre(-10, 0);
    p += 10.*pre(-9, -1);
    p += 10.*pre(-9, 1);
    p += 45.*pre(-8, -2);
    p += 100.*pre(-8, 0);
    p += 45.*pre(-8, 2);
    p += 120.*pre(-7, -3);
    p += 450.*pre(-7, -1);
    p += 450.*pre(-7, 1);
    p += 120.*pre(-7, 3);
    p += 210.*pre(-6, -4);
    p += 1200.*pre(-6, -2);
    p += 2025.*pre(-6, 0);
    p += 1200.*pre(-6, 2);
    p += 210.*pre(-6, 4);
    p += 252.*pre(-5, -5);
    p += 2100.*pre(-5, -3);
    p += 5400.*pre(-5, -1);
    p += 5400.*pre(-5, 1);
    p += 2100.*pre(-5, 3);
    p += 252.*pre(-5, 5);
    p += 210.*pre(-4, -6);
    p += 2520.*pre(-4, -4);
    p += 9450.*pre(-4, -2);
    p += 14400.*pre(-4, 0);
    p += 9450.*pre(-4, 2);
    p += 2520.*pre(-4, 4);
    p += 210.*pre(-4, 6);
    p += 120.*pre(-3, -7);
    p += 2100.*pre(-3, -5);
    p += 11340.*pre(-3, -3);
    p += 25200.*pre(-3, -1);
    p += 25200.*pre(-3, 1);
    p += 11340.*pre(-3, 3);
    p += 2100.*pre(-3, 5);
    p += 120.*pre(-3, 7);
    p += 45.*pre(-2, -8);
    p += 1200.*pre(-2, -6);
    p += 9450.*pre(-2, -4);
    p += 30240.*pre(-2, -2);
    p += 44100.*pre(-2, 0);
    p += 30240.*pre(-2, 2);
    p += 9450.*pre(-2, 4);
    p += 1200.*pre(-2, 6);
    p += 45.*pre(-2, 8);
    p += 10.*pre(-1, -9);
    p += 450.*pre(-1, -7);
    p += 5400.*pre(-1, -5);
    p += 25200.*pre(-1, -3);
    p += 52920.*pre(-1, -1);
    p += 52920.*pre(-1, 1);
    p += 25200.*pre(-1, 3);
    p += 5400.*pre(-1, 5);
    p += 450.*pre(-1, 7);
    p += 10.*pre(-1, 9);
    p += 1.*pre(0, -10);
    p += 100.*pre(0, -8);
    p += 2025.*pre(0, -6);
    p += 14400.*pre(0, -4);
    p += 44100.*pre(0, -2);
    p += 63504.*pre(0, 0);
    p += 44100.*pre(0, 2);
    p += 14400.*pre(0, 4);
    p += 2025.*pre(0, 6);
    p += 100.*pre(0, 8);
    p += 1.*pre(0, 10);
    p += 10.*pre(1, -9);
    p += 450.*pre(1, -7);
    p += 5400.*pre(1, -5);
    p += 25200.*pre(1, -3);
    p += 52920.*pre(1, -1);
    p += 52920.*pre(1, 1);
    p += 25200.*pre(1, 3);
    p += 5400.*pre(1, 5);
    p += 450.*pre(1, 7);
    p += 10.*pre(1, 9);
    p += 45.*pre(2, -8);
    p += 1200.*pre(2, -6);
    p += 9450.*pre(2, -4);
    p += 30240.*pre(2, -2);
    p += 44100.*pre(2, 0);
    p += 30240.*pre(2, 2);
    p += 9450.*pre(2, 4);
    p += 1200.*pre(2, 6);
    p += 45.*pre(2, 8);
    p += 120.*pre(3, -7);
    p += 2100.*pre(3, -5);
    p += 11340.*pre(3, -3);
    p += 25200.*pre(3, -1);
    p += 25200.*pre(3, 1);
    p += 11340.*pre(3, 3);
    p += 2100.*pre(3, 5);
    p += 120.*pre(3, 7);
    p += 210.*pre(4, -6);
    p += 2520.*pre(4, -4);
    p += 9450.*pre(4, -2);
    p += 14400.*pre(4, 0);
    p += 9450.*pre(4, 2);
    p += 2520.*pre(4, 4);
    p += 210.*pre(4, 6);
    p += 252.*pre(5, -5);
    p += 2100.*pre(5, -3);
    p += 5400.*pre(5, -1);
    p += 5400.*pre(5, 1);
    p += 2100.*pre(5, 3);
    p += 252.*pre(5, 5);
    p += 210.*pre(6, -4);
    p += 1200.*pre(6, -2);
    p += 2025.*pre(6, 0);
    p += 1200.*pre(6, 2);
    p += 210.*pre(6, 4);
    p += 120.*pre(7, -3);
    p += 450.*pre(7, -1);
    p += 450.*pre(7, 1);
    p += 120.*pre(7, 3);
    p += 45.*pre(8, -2);
    p += 100.*pre(8, 0);
    p += 45.*pre(8, 2);
    p += 10.*pre(9, -1);
    p += 10.*pre(9, 1);
    p += 1.*pre(10, 0);
    return  p / 1048576.;
}

void mainImage( out vec4 fragColor, in vec2 C )
{
    float div = getDiv();
    float p = getPre() - div;
    fragColor = vec4(p, div, vec3(1));
}