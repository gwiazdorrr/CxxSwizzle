#include <shadertoy_sandbox.hpp>

using namespace swizzle;

#include <swizzle/define_vector_functions.hpp>

namespace
{
    struct builtin_inout_proxy
    {
        // proxies are needed for vectors, as they need to work with swizzles
        using vec2 =  swizzle::inout_wrapper<swizzle::vec2>;
        using vec3 =  swizzle::inout_wrapper<swizzle::vec3>;
        using vec4 =  swizzle::inout_wrapper<swizzle::vec4>;
        using ivec2 = swizzle::inout_wrapper<swizzle::ivec2>;
        using ivec3 = swizzle::inout_wrapper<swizzle::ivec3>;
        using ivec4 = swizzle::inout_wrapper<swizzle::ivec4>;
        using uvec2 = swizzle::inout_wrapper<swizzle::uvec2>;
        using uvec3 = swizzle::inout_wrapper<swizzle::uvec3>;
        using uvec4 = swizzle::inout_wrapper<swizzle::uvec4>;
        using bvec2 = swizzle::inout_wrapper<swizzle::bvec2>;
        using bvec3 = swizzle::inout_wrapper<swizzle::bvec3>;
        using bvec4 = swizzle::inout_wrapper<swizzle::bvec4>;

        // regular types don't need proxies
        using float_type = swizzle::float_type&;
        using int_type =   swizzle::int_type&;
        using uint_type =  swizzle::uint_type&;
        using bool_type =  swizzle::bool_type&;
    };

    // change meaning of glsl keywords to match sandbox
    #define uniform extern
    #define in
    #define out inout
    #define inout inout_proxy::
    #define float float_type
    #define int  int_type
    #define uint uint_type
    #define bool bool_type
    #define lowp
    #define highp
    #define final final_
    #define discard _cxxswizzle_discarded = true
    // char is not a type in glsl so can be used freely
    #define char definitely_not_a_char

    // cmath constants need to be undefined, as sometimes shaders define their own
    #undef M_E       
    #undef M_LOG2E   
    #undef M_LOG10E  
    #undef M_LN2     
    #undef M_LN10    
    #undef M_PI      
    #undef M_PI_2    
    #undef M_PI_4    
    #undef M_1_PI    
    #undef M_2_PI    
    #undef M_2_SQRTPI
    #undef M_SQRT2   
    #undef M_SQRT1_2 

    #ifdef CXXSWIZZLE_OVERRIDE_IF
    #define if(x) CXXSWIZZLE_OVERRIDE_IF(x)
    #endif
    #ifdef CXXSWIZZLE_OVERRIDE_ELSE
    #define else CXXSWIZZLE_OVERRIDE_ELSE
    #endif
    #ifdef CXXSWIZZLE_OVERRIDE_WHILE
    #define while(x) CXXSWIZZLE_OVERRIDE_WHILE(x)
    #endif
    #ifdef CXXSWIZZLE_OVERRIDE_CONDITION
    #define condition(x) CXXSWIZZLE_OVERRIDE_CONDITION(x)
    #endif

    #define VA_COUNT(...) detail::va_count(__VA_ARGS__)

    namespace detail
    {
        template<typename ...Args>
        constexpr std::size_t va_count(Args&&...) { return sizeof...(Args); }
    }

    #define CXXSWIZZLE
    #define ARRAY(type, name, ...) type name[VA_COUNT(__VA_ARGS__)] = { __VA_ARGS__ }

    #pragma warning(push)
    #pragma warning(disable: 4244) // disable return implicit conversion warning
    #pragma warning(disable: 4305) // disable truncation warning

    struct _cxxswizzle_fragment_shader_@FRAG_NAME@ : shadertoy::shader_inputs
    {
        using _cxxswizzle_fragment_shader = _cxxswizzle_fragment_shader_@FRAG_NAME@;

@FRAG_CUSTOM_STRUCTS_SUPPORT@

        vec2 gl_FragCoord;
        vec4 gl_FragColor;
        bool_type _cxxswizzle_discarded;

        #cmakedefine FRAG_HAS_COMMON_INCLUDE
        #ifdef FRAG_HAS_COMMON_INCLUDE
        #include "@FRAG_COMMON_INCLUDE@"
        #endif

        #include "@FRAG_PATH@"
    };
}


// need to undef any stuff that might possibly have been defined in the shader and ruin the following function
#undef namespace
#undef shadertoy
#undef vec4
#undef @FRAG_NAME@
#undef const
#undef shader_inputs
#undef uniforms
#undef vec2
#undef fragCoord
#undef vec4
#undef prevFragColor
#undef bool_type
#undef discarded
#undef _cxxswizzle_fragment_shader_@FRAG_NAME@
#undef shader
#undef static_cast
#undef gl_FragColor
#undef gl_FragCoord
#undef false
#undef mainImage
#undef _cxxswizzle_discarded
#undef return

namespace shadertoy
{
    vec4 @FRAG_NAME@(const shader_inputs& uniforms, vec2 fragCoord, vec4 prevFragColor, bool_type* discarded)
    {
        _cxxswizzle_fragment_shader_@FRAG_NAME@ shader;
        static_cast<shader_inputs&>(shader) = uniforms;
        shader.gl_FragColor = prevFragColor;
        shader.gl_FragCoord = fragCoord;
        shader._cxxswizzle_discarded = false;
        shader.mainImage(shader.gl_FragColor, fragCoord);
        if (discarded)
        {
            *discarded = shader._cxxswizzle_discarded;
        }
        return shader.gl_FragColor;
    }
}